# Generated by Django 3.0.7 on 2020-06-27 18:24

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('parrent_account_id', models.CharField(default='', max_length=20, verbose_name='Родительский аккаунт')),
                ('username', models.CharField(max_length=30, unique=True, verbose_name='Никнейм')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('firstName', models.CharField(max_length=128, verbose_name='Имя')),
                ('lastName', models.CharField(max_length=128, verbose_name='Фамилия')),
                ('gender', models.CharField(choices=[('Male', 'М'), ('Female', 'Ж')], max_length=10, verbose_name='Пол')),
                ('birthday', models.DateField(verbose_name='Дата рождения')),
                ('country', models.CharField(max_length=128, verbose_name='Страна')),
                ('area', models.CharField(max_length=128, verbose_name='Область')),
                ('city', models.CharField(max_length=128, verbose_name='Город')),
                ('phoneNumber', models.CharField(max_length=20, unique=True, verbose_name='Телефон')),
                ('studyPlace', models.CharField(max_length=128, verbose_name='Место учебы')),
                ('schClass', models.CharField(max_length=10, verbose_name='Класс/Курс')),
                ('workPlace', models.CharField(max_length=128, verbose_name='Место Работы')),
                ('balance', models.CharField(default=0.0, max_length=128, verbose_name='Баланс')),
                ('lvl', models.CharField(default=0, max_length=128, verbose_name='Уровень')),
                ('rating', models.CharField(default=0, max_length=128, verbose_name='Рейтинг')),
                ('league', models.CharField(default='', max_length=128, verbose_name='Лига')),
                ('scoreHistory', models.TextField(default=[], verbose_name='История счета')),
                ('countMaster', models.CharField(default=0, max_length=128, verbose_name='Счетчик подсказок мастера')),
                ('countDelTwoAnsw', models.CharField(default=0, max_length=128, verbose_name='Счетчик подсказок "Убрать два ответа"')),
                ('countChance', models.CharField(default=0, max_length=128, verbose_name='Счетчик подсказок "Второй шанс"')),
                ('countSkipQuest', models.CharField(default=0, max_length=128, verbose_name='Счетчик пропуска вопроса')),
                ('countRights', models.CharField(default=0, max_length=128, verbose_name='Счетчик правильных ответов')),
                ('countWrongs', models.CharField(default=0, max_length=128, verbose_name='Счетчик неправильныых ответов')),
                ('countTotalGames', models.CharField(default=0, max_length=128, verbose_name='Счетчик игр')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата регистрации')),
                ('child_account', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
